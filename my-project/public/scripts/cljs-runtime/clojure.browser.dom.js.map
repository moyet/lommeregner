{"version":3,"sources":["clojure/browser/dom.cljs"],"mappings":"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","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","clojure.browser.dom/append","seq26924","G__26925","cljs.core/first","cljs.core/next","self__4723__auto__","parent","children","cljs.core.apply","goog.dom/append","clojure$browser$dom$DOMBuilder$_element$dyn","x__4428__auto__","m__4429__auto__","clojure.browser.dom/-element","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","G__26927","js/Error","clojure.browser.dom/DOMBuilder","this","attrs-or-children","attrs","clojure.browser.dom/log","seq26928","self__4724__auto__","cljs.core/seq","args","js/console","cljs.core/pr-str","clojure.browser.dom/log-obj","obj","goog.object/set","cljs.core/PROTOCOL_SENTINEL","clojure.browser.dom.log","cljs.core/Keyword","goog.dom/createElement","cljs.core/name","goog.dom/createTextNode","cljs.core/map?","cljs.core/rest","str-attrs","cljs.core.reduce","p__26929","vec__26930","cljs.core.nth","o","k","v","G__26935","goog.dom/createDom","cljs.core.map","cljs.core/PersistentVector","tag","cljs.core/second","cljs.core.drop","js/Element","G__26941","clojure.browser.dom/element","args-arr__4757__auto__","argseq__4758__auto__","seq26939","G__26940","tag-or-text","clojure.browser.dom/remove-children","id","goog.dom/getElement","goog.dom/removeChildren","clojure.browser.dom/get-element","clojure.browser.dom/html->dom","s","goog.dom/htmlToDocumentFragment","clojure.browser.dom/insert-at","child","index","goog.dom/insertChildAt","clojure.browser.dom/ensure-element","e","clojure.browser.dom/replace-node","old-node","new-node","goog.dom/replaceNode","clojure.browser.dom/set-text","goog.dom/setTextContent","clojure.browser.dom/get-value","clojure.browser.dom/set-properties","m","goog.dom/setProperties","goog.object/create","cljs.core.interleave","cljs.core/keys","cljs.core/vals","clojure.browser.dom/set-value","clojure.browser.dom/click-element"],"sourcesContent":[";;  Copyright (c) Rich Hickey. All rights reserved.\n;;  The use and distribution terms for this software are covered by the\n;;  Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;  which can be found in the file epl-v10.html at the root of this distribution.\n;;  By using this software in any fashion, you are agreeing to be bound by\n;;  the terms of this license.\n;;  You must not remove this notice, or any other, from this software.\n\n(ns clojure.browser.dom\n  (:require [goog.dom :as gdom]\n            [goog.object :as gobject]))\n\n(defn append [parent & children]\n  (apply gdom/append parent children)\n  parent)\n\n(defprotocol DOMBuilder\n  (-element [this] [this attrs-or-children] [this attrs children]))\n\n(defn log [& args]\n  (.log js/console (apply pr-str args)))\n\n(defn log-obj [obj]\n  (.log js/console obj))\n\n(extend-protocol DOMBuilder\n\n  string\n  (-element\n    ([this]\n       (log \"string (-element \" this \")\")\n       (cond (keyword? this) (gdom/createElement  (name this))\n             :else           (gdom/createTextNode (name this))))\n\n    ([this attrs-or-children]\n       (log \"string (-element \" this \" \" attrs-or-children \")\")\n       (let [attrs (first attrs-or-children)]\n         (if (map? attrs)\n           (-element this attrs (rest attrs-or-children))\n           (-element this nil attrs-or-children))))\n\n    ([this attrs children]\n       (log \"string (-element \" this \" \" attrs \" \" children \")\")\n       (let [str-attrs (if (and (map? attrs) (seq attrs))\n                         (reduce (fn [o [k v]]\n                                   (let [o (if (nil? o) (js-obj) o)]\n                                     (log \"o = \" o)\n                                     (log \"k = \" k)\n                                     (log \"v = \" v)\n                                     (when (or (keyword? k)\n                                               (string? k))\n                                       (doto o (gobject/set (name k) v)))))\n                                 (js-obj)\n                                 attrs)\n                         nil)]\n         (log-obj str-attrs)\n         (if (seq children)\n           (apply gdom/createDom\n                  (name this)\n                  str-attrs\n                  (map -element children))\n           (gdom/createDom (name this)\n                           str-attrs)))))\n\n  PersistentVector\n  (-element\n    [this]\n    (log \"PersistentVector (-element \" this \")\")\n    (let [tag      (first this)\n          attrs    (second this)\n          children (drop 2 this)]\n      (if (map? attrs)\n        (-element tag attrs children)\n        (-element tag nil (rest this)))))\n\n  js/Element\n  (-element [this]\n    (log \"js/Element (-element \" this \")\")\n    this))\n\n(defn element\n  ([tag-or-text]\n     (log \"(element \" tag-or-text \")\")\n     (-element tag-or-text))\n  ([tag & children]\n     (log \"(element \" tag \" \" children \")\")\n     (let [attrs (first children)]\n       (if (map? attrs)\n         (-element tag attrs (rest children))\n         (-element tag nil children)))))\n\n(defn remove-children\n  \"Remove all children from the element with the passed id.\"\n  [id]\n  (let [parent (gdom/getElement (name id))]\n    (do (gdom/removeChildren parent))))\n\n(defn get-element [id]\n  (gdom/getElement (name id)))\n\n(defn html->dom [s]\n  (gdom/htmlToDocumentFragment s))\n\n(defn insert-at [parent child index]\n  (gdom/insertChildAt parent child index))\n\n(defn ensure-element\n  \"Coerce the argument to a dom element if possible.\"\n  [e]\n  (cond (keyword? e) (get-element e)\n        (string? e) (html->dom e)\n        :else e))\n\n(defn replace-node\n  \"Replace old-node with new-node. old-node can be an element or a\n   keyword which is the id of the node to replace.  new-node can be an\n   element or an html string.\"\n  [old-node new-node]\n  (let [old-node (ensure-element old-node)\n        new-node (ensure-element new-node)]\n    (gdom/replaceNode new-node old-node)\n    new-node))\n\n(defn set-text\n  \"Set the text content for the passed element returning the\n  element. If a keyword is passed in the place of e, the element with\n  that id will be used and returned.\"\n  [e s]\n  (gdom/setTextContent (ensure-element e) s))\n\n(defn get-value\n  \"Get the value of an element.\"\n  [e]\n  (.-value (ensure-element e)))\n\n(defn set-properties\n  \"Set properties on an element\"\n  [e m]\n  (gdom/setProperties (ensure-element e)\n                      (apply gobject/create (interleave (keys m) (vals m)))))\n\n(defn set-value\n  \"Set the value property for an element.\"\n  [e v]\n  (set-properties e {\"value\" v}))\n\n(defn click-element\n  [e]\n  (.click (ensure-element e) ()))\n\n;; TODO CSS class manipulation\n;; TODO Query syntax\n"]}